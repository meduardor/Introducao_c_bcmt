#ifndef PONG_H
#define PONG_H

#include <stdbool.h>
#include <SDL2/SDL.h>

#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define PADDLE_WIDTH 20
#define PADDLE_HEIGHT 100
#define BALL_SIZE 10
#define BALL_SPEED 3

typedef struct {
    int x;
    int y;
    int dx;
    int dy;
} Ball;

typedef struct {
    int x;
    int y;
    int dy;
} Paddle;

void initialize(SDL_Window** window, SDL_Renderer** renderer);
void handleEvents();
void updateGame();
void renderGame(SDL_Renderer* renderer);
void* gameThread(void* arg);

#endif

#####################################################

#include "pong.h"
#include <stdio.h>
#include < pthread.h>

Ball ball;
Paddle paddle1, paddle2;
bool quit = false;
pthread_mutex_t mutex;

void initialize(SDL_Window** window, SDL_Renderer** renderer) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        fprintf(stderr, "SDL could not initialize: %s\n", SDL_GetError());
        exit(1);
    }

    *window = SDL_CreateWindow("Pong", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
                               SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);

    if (*window == NULL) {
        fprintf(stderr, "Window could not be created: %s\n", SDL_GetError());
        exit(1);
    }

    *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);

    if (*renderer == NULL) {
        fprintf(stderr, "Renderer could not be created: %s\n", SDL_GetError());
        exit(1);
    }

    SDL_SetRenderDrawColor(*renderer, 0, 0, 0, 255);
    SDL_RenderClear(*renderer);
    SDL_RenderPresent(*renderer);
}

void handleEvents() {
    SDL_Event event;

    while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT) {
            quit = true;
        }
    }

    const Uint8* state = SDL_GetKeyboardState(NULL);
    if (state[SDL_SCANCODE_UP]) {
        pthread_mutex_lock(&mutex);
        paddle2.y -= paddle2.dy;
        pthread_mutex_unlock(&mutex);
    }
    if (state[SDL_SCANCODE_DOWN]) {
        pthread_mutex_lock(&mutex);
        paddle2.y += paddle2.dy;
        pthread_mutex_unlock(&mutex);
    }
    if (state[SDL_SCANCODE_W]) {
        pthread_mutex_lock(&mutex);
        paddle1.y -= paddle1.dy;
        pthread_mutex_unlock(&mutex);
    }
    if (state[SDL_SCANCODE_S]) {
        pthread_mutex_lock(&mutex);
        paddle1.y += paddle1.dy;
        pthread_mutex_unlock(&mutex);
    }
}

void updateGame() {
    pthread_mutex_lock(&mutex);

    ball.x += ball.dx;
    ball.y += ball.dy;

    if (ball.y <= 0 || ball.y >= SCREEN_HEIGHT - BALL_SIZE) {
        ball.dy = -ball.dy;
    }

    if (ball.x <= PADDLE_WIDTH && ball.y >= paddle1.y && ball.y <= paddle1.y + PADDLE_HEIGHT) {
        ball.dx = -ball.dx;
    }

    if (ball.x >= SCREEN_WIDTH - PADDLE_WIDTH - BALL_SIZE && ball.y >= paddle2.y && ball.y <= paddle2.y + PADDLE_HEIGHT) {
        ball.dx = -ball.dx;
    }

    if (ball.x <= 0 || ball.x >= SCREEN_WIDTH - BALL_SIZE) {
        quit = true;
    }

    pthread_mutex_unlock(&mutex);
}

void renderGame(SDL_Renderer* renderer) {
    pthread_mutex_lock(&mutex);

    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);

    SDL_Rect ballRect = {ball.x, ball.y, BALL_SIZE, BALL_SIZE};
    SDL_RenderFillRect(renderer, &ballRect);

    SDL_Rect paddle1Rect = {paddle1.x, paddle1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    SDL_RenderFillRect(renderer, &paddle1Rect);

    SDL_Rect paddle2Rect = {paddle2.x, paddle2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    SDL_RenderFillRect(renderer, &paddle2Rect);

    SDL_RenderPresent(renderer);

    pthread_mutex_unlock(&mutex);
}

void* gameThread(void* arg) {
    SDL_Window* window;
    SDL_Renderer* renderer;

    initialize(&window, &renderer);

    while (!quit) {
        handleEvents();
        updateGame();
        renderGame(renderer);
        SDL_Delay(10);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    pthread_exit(NULL);
}

int main() {
    pthread_t thread;
    pthread_mutex_init(&mutex, NULL);

    ball.x = SCREEN_WIDTH / 2 - BALL_SIZE / 2;
    ball.y = SCREEN_HEIGHT / 2 - BALL_SIZE / 2;
    ball.dx = BALL_SPEED;
    ball.dy = BALL_SPEED;

    paddle1.x = PADDLE_WIDTH;
    paddle1.y = SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2;
    paddle1.dy = 5;

    paddle2.x = SCREEN_WIDTH - PADDLE_WIDTH - PADDLE_WIDTH;
    paddle2.y = SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2;
    paddle2.dy = 5;

    if (pthread_create(&thread, NULL, gameThread, NULL) != 0) {
        fprintf(stderr, "Failed to create thread\n");
        return 1;
    }

    pthread_join(thread, NULL);
    pthread_mutex_destroy(&mutex);

    return 0;
}
